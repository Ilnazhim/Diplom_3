{"name": "Появление номера заказа в блоке \"В работе\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a76cff041d3c6f77bc4f5ef49cf68df2\")>\nuser = {'email': 'thomas58@example.org', 'name': 'nathanielhendrix', 'password': 'X03489832'}\n\n    @pytest.fixture\n    def order(driver, user):\n        login_page = LoginPage(driver)\n        login_page.open_page(Urls.BASE_URL + Urls.LOGIN_URL)\n        login_page.set_email(user['email'])\n        login_page.set_password(user['password'])\n        login_page.click_on_login_button()\n>       login_page.changing_url_login()\n\nconftest.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\login_page.py:31: in changing_url_login\n    return self.wait_changing_url(Urls.BASE_URL + Urls.LOGIN_URL)\npages\\base_page.py:24: in wait_changing_url\n    return WebDriverWait(self.driver, 20).until(expected_conditions.url_changes(url))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a76cff041d3c6f77bc4f5ef49cf68df2\")>\nmethod = <function url_changes.<locals>._predicate at 0x00000230EDB5D580>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Users\\ilnazhim\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1719498219645, "stop": 1719498219645, "uuid": "ec6e042b-3a4c-4464-b104-455d4c5fc117", "historyId": "bbd369fa7eaf5f5b6cabcc18c98148fe", "testCaseId": "39498af4053d7bbafc6765c4ea8960f6", "fullName": "tests.test_orders.TestOrders#test_order_in_preparing_list", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_orders"}, {"name": "subSuite", "value": "TestOrders"}, {"name": "host", "value": "HOME-PC"}, {"name": "thread", "value": "3044-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_orders"}]}